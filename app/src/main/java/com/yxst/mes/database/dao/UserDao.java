package com.yxst.mes.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.mes.database.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserID = new Property(0, Long.class, "UserID", true, "_id");
        public final static Property LoginName = new Property(1, String.class, "LoginName", false, "LOGIN_NAME");
        public final static Property LoginPwdCode = new Property(2, String.class, "LoginPwdCode", false, "LOGIN_PWD_CODE");
        public final static Property RoleCode = new Property(3, String.class, "RoleCode", false, "ROLE_CODE");
        public final static Property RealName = new Property(4, String.class, "RealName", false, "REAL_NAME");
        public final static Property DeptID = new Property(5, int.class, "DeptID", false, "DEPT_ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: UserID
                "\"LOGIN_NAME\" TEXT," + // 1: LoginName
                "\"LOGIN_PWD_CODE\" TEXT," + // 2: LoginPwdCode
                "\"ROLE_CODE\" TEXT," + // 3: RoleCode
                "\"REAL_NAME\" TEXT," + // 4: RealName
                "\"DEPT_ID\" INTEGER NOT NULL );"); // 5: DeptID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(1, UserID);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(2, LoginName);
        }
 
        String LoginPwdCode = entity.getLoginPwdCode();
        if (LoginPwdCode != null) {
            stmt.bindString(3, LoginPwdCode);
        }
 
        String RoleCode = entity.getRoleCode();
        if (RoleCode != null) {
            stmt.bindString(4, RoleCode);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(5, RealName);
        }
        stmt.bindLong(6, entity.getDeptID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(1, UserID);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(2, LoginName);
        }
 
        String LoginPwdCode = entity.getLoginPwdCode();
        if (LoginPwdCode != null) {
            stmt.bindString(3, LoginPwdCode);
        }
 
        String RoleCode = entity.getRoleCode();
        if (RoleCode != null) {
            stmt.bindString(4, RoleCode);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(5, RealName);
        }
        stmt.bindLong(6, entity.getDeptID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UserID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LoginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LoginPwdCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RoleCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RealName
            cursor.getInt(offset + 5) // DeptID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginPwdCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoleCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeptID(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
