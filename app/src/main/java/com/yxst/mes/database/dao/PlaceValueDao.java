package com.yxst.mes.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.mes.database.model.PlaceValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLACE_VALUE".
*/
public class PlaceValueDao extends AbstractDao<PlaceValue, Long> {

    public static final String TABLENAME = "PLACE_VALUE";

    /**
     * Properties of entity PlaceValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "UserID", false, "USER_ID");
        public final static Property LineID = new Property(2, Long.class, "LineID", false, "LINE_ID");
        public final static Property EquipmentID = new Property(3, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property PlaceID = new Property(4, Long.class, "PlaceID", false, "PLACE_ID");
        public final static Property InspectStatus = new Property(5, int.class, "inspectStatus", false, "INSPECT_STATUS");
        public final static Property UplaodStatus = new Property(6, int.class, "uplaodStatus", false, "UPLAOD_STATUS");
        public final static Property BeginTime = new Property(7, java.util.Date.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(8, java.util.Date.class, "EndTime", false, "END_TIME");
    }


    public PlaceValueDao(DaoConfig config) {
        super(config);
    }
    
    public PlaceValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLACE_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"USER_ID\" INTEGER," + // 1: UserID
                "\"LINE_ID\" INTEGER," + // 2: LineID
                "\"EQUIPMENT_ID\" INTEGER," + // 3: EquipmentID
                "\"PLACE_ID\" INTEGER," + // 4: PlaceID
                "\"INSPECT_STATUS\" INTEGER NOT NULL ," + // 5: inspectStatus
                "\"UPLAOD_STATUS\" INTEGER NOT NULL ," + // 6: uplaodStatus
                "\"BEGIN_TIME\" INTEGER," + // 7: BeginTime
                "\"END_TIME\" INTEGER);"); // 8: EndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLACE_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlaceValue entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(3, LineID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(4, EquipmentID);
        }
 
        Long PlaceID = entity.getPlaceID();
        if (PlaceID != null) {
            stmt.bindLong(5, PlaceID);
        }
        stmt.bindLong(6, entity.getInspectStatus());
        stmt.bindLong(7, entity.getUplaodStatus());
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(8, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(9, EndTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlaceValue entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(3, LineID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(4, EquipmentID);
        }
 
        Long PlaceID = entity.getPlaceID();
        if (PlaceID != null) {
            stmt.bindLong(5, PlaceID);
        }
        stmt.bindLong(6, entity.getInspectStatus());
        stmt.bindLong(7, entity.getUplaodStatus());
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(8, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(9, EndTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlaceValue readEntity(Cursor cursor, int offset) {
        PlaceValue entity = new PlaceValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // EquipmentID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // PlaceID
            cursor.getInt(offset + 5), // inspectStatus
            cursor.getInt(offset + 6), // uplaodStatus
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // BeginTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // EndTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlaceValue entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLineID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEquipmentID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPlaceID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setInspectStatus(cursor.getInt(offset + 5));
        entity.setUplaodStatus(cursor.getInt(offset + 6));
        entity.setBeginTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlaceValue entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlaceValue entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlaceValue entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
