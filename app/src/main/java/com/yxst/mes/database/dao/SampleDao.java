package com.yxst.mes.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.mes.database.model.Sample;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLE".
*/
public class SampleDao extends AbstractDao<Sample, Long> {

    public static final String TABLENAME = "SAMPLE";

    /**
     * Properties of entity Sample.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, Long.class, "ID", false, "ID");
        public final static Property RFIDid = new Property(2, String.class, "RFIDid", false, "RFIDID");
        public final static Property DataBaseName = new Property(3, String.class, "DataBaseName", false, "DATA_BASE_NAME");
        public final static Property SampleName = new Property(4, String.class, "SampleName", false, "SAMPLE_NAME");
        public final static Property BindTime = new Property(5, java.util.Date.class, "BindTime", false, "BIND_TIME");
    }


    public SampleDao(DaoConfig config) {
        super(config);
    }
    
    public SampleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID\" INTEGER," + // 1: ID
                "\"RFIDID\" TEXT," + // 2: RFIDid
                "\"DATA_BASE_NAME\" TEXT," + // 3: DataBaseName
                "\"SAMPLE_NAME\" TEXT," + // 4: SampleName
                "\"BIND_TIME\" INTEGER);"); // 5: BindTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sample entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
 
        String RFIDid = entity.getRFIDid();
        if (RFIDid != null) {
            stmt.bindString(3, RFIDid);
        }
 
        String DataBaseName = entity.getDataBaseName();
        if (DataBaseName != null) {
            stmt.bindString(4, DataBaseName);
        }
 
        String SampleName = entity.getSampleName();
        if (SampleName != null) {
            stmt.bindString(5, SampleName);
        }
 
        java.util.Date BindTime = entity.getBindTime();
        if (BindTime != null) {
            stmt.bindLong(6, BindTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sample entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
 
        String RFIDid = entity.getRFIDid();
        if (RFIDid != null) {
            stmt.bindString(3, RFIDid);
        }
 
        String DataBaseName = entity.getDataBaseName();
        if (DataBaseName != null) {
            stmt.bindString(4, DataBaseName);
        }
 
        String SampleName = entity.getSampleName();
        if (SampleName != null) {
            stmt.bindString(5, SampleName);
        }
 
        java.util.Date BindTime = entity.getBindTime();
        if (BindTime != null) {
            stmt.bindLong(6, BindTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sample readEntity(Cursor cursor, int offset) {
        Sample entity = new Sample( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RFIDid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DataBaseName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SampleName
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // BindTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sample entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRFIDid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDataBaseName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSampleName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBindTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sample entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sample entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sample entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
