package com.yxst.mes.database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.yxst.mes.database.model.Cycle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CYCLE".
*/
public class CycleDao extends AbstractDao<Cycle, Long> {

    public static final String TABLENAME = "CYCLE";

    /**
     * Properties of entity Cycle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property PlanID = new Property(1, Long.class, "PlanID", false, "PLAN_ID");
        public final static Property BeginTime = new Property(2, String.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(3, String.class, "EndTime", false, "END_TIME");
    }

    private Query<Cycle> plan_CycleListQuery;

    public CycleDao(DaoConfig config) {
        super(config);
    }
    
    public CycleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CYCLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 1: PlanID
                "\"BEGIN_TIME\" TEXT," + // 2: BeginTime
                "\"END_TIME\" TEXT);"); // 3: EndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CYCLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cycle entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPlanID());
 
        String BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindString(3, BeginTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cycle entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPlanID());
 
        String BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindString(3, BeginTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cycle readEntity(Cursor cursor, int offset) {
        Cycle entity = new Cycle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getLong(offset + 1), // PlanID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BeginTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // EndTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cycle entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanID(cursor.getLong(offset + 1));
        entity.setBeginTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cycle entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cycle entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cycle entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "CycleList" to-many relationship of Plan. */
    public List<Cycle> _queryPlan_CycleList(Long PlanID) {
        synchronized (this) {
            if (plan_CycleListQuery == null) {
                QueryBuilder<Cycle> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlanID.eq(null));
                plan_CycleListQuery = queryBuilder.build();
            }
        }
        Query<Cycle> query = plan_CycleListQuery.forCurrentThread();
        query.setParameter(0, PlanID);
        return query.list();
    }

}
