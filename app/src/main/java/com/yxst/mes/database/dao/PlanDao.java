package com.yxst.mes.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.mes.database.model.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "PLAN";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LineID = new Property(0, Long.class, "LineID", false, "LINE_ID");
        public final static Property PlanID = new Property(1, Long.class, "PlanID", true, "_id");
        public final static Property PlanName = new Property(2, String.class, "PlanName", false, "PLAN_NAME");
        public final static Property EquipmentID = new Property(3, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property InspectionCycle = new Property(4, int.class, "InspectionCycle", false, "INSPECTION_CYCLE");
        public final static Property InspectionCycleUnit = new Property(5, int.class, "InspectionCycleUnit", false, "INSPECTION_CYCLE_UNIT");
        public final static Property InspectionType = new Property(6, int.class, "InspectionType", false, "INSPECTION_TYPE");
        public final static Property PlanType = new Property(7, int.class, "PlanType", false, "PLAN_TYPE");
        public final static Property BaseDate = new Property(8, java.util.Date.class, "BaseDate", false, "BASE_DATE");
        public final static Property InspectionClass = new Property(9, int.class, "InspectionClass", false, "INSPECTION_CLASS");
    }

    private DaoSession daoSession;


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN\" (" + //
                "\"LINE_ID\" INTEGER," + // 0: LineID
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: PlanID
                "\"PLAN_NAME\" TEXT," + // 2: PlanName
                "\"EQUIPMENT_ID\" INTEGER," + // 3: EquipmentID
                "\"INSPECTION_CYCLE\" INTEGER NOT NULL ," + // 4: InspectionCycle
                "\"INSPECTION_CYCLE_UNIT\" INTEGER NOT NULL ," + // 5: InspectionCycleUnit
                "\"INSPECTION_TYPE\" INTEGER NOT NULL ," + // 6: InspectionType
                "\"PLAN_TYPE\" INTEGER NOT NULL ," + // 7: PlanType
                "\"BASE_DATE\" INTEGER," + // 8: BaseDate
                "\"INSPECTION_CLASS\" INTEGER NOT NULL );"); // 9: InspectionClass
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(1, LineID);
        }
 
        Long PlanID = entity.getPlanID();
        if (PlanID != null) {
            stmt.bindLong(2, PlanID);
        }
 
        String PlanName = entity.getPlanName();
        if (PlanName != null) {
            stmt.bindString(3, PlanName);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(4, EquipmentID);
        }
        stmt.bindLong(5, entity.getInspectionCycle());
        stmt.bindLong(6, entity.getInspectionCycleUnit());
        stmt.bindLong(7, entity.getInspectionType());
        stmt.bindLong(8, entity.getPlanType());
 
        java.util.Date BaseDate = entity.getBaseDate();
        if (BaseDate != null) {
            stmt.bindLong(9, BaseDate.getTime());
        }
        stmt.bindLong(10, entity.getInspectionClass());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(1, LineID);
        }
 
        Long PlanID = entity.getPlanID();
        if (PlanID != null) {
            stmt.bindLong(2, PlanID);
        }
 
        String PlanName = entity.getPlanName();
        if (PlanName != null) {
            stmt.bindString(3, PlanName);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(4, EquipmentID);
        }
        stmt.bindLong(5, entity.getInspectionCycle());
        stmt.bindLong(6, entity.getInspectionCycleUnit());
        stmt.bindLong(7, entity.getInspectionType());
        stmt.bindLong(8, entity.getPlanType());
 
        java.util.Date BaseDate = entity.getBaseDate();
        if (BaseDate != null) {
            stmt.bindLong(9, BaseDate.getTime());
        }
        stmt.bindLong(10, entity.getInspectionClass());
    }

    @Override
    protected final void attachEntity(Plan entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // LineID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // PlanID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PlanName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // EquipmentID
            cursor.getInt(offset + 4), // InspectionCycle
            cursor.getInt(offset + 5), // InspectionCycleUnit
            cursor.getInt(offset + 6), // InspectionType
            cursor.getInt(offset + 7), // PlanType
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // BaseDate
            cursor.getInt(offset + 9) // InspectionClass
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setLineID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPlanName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEquipmentID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setInspectionCycle(cursor.getInt(offset + 4));
        entity.setInspectionCycleUnit(cursor.getInt(offset + 5));
        entity.setInspectionType(cursor.getInt(offset + 6));
        entity.setPlanType(cursor.getInt(offset + 7));
        entity.setBaseDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setInspectionClass(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setPlanID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getPlanID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        return entity.getPlanID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
