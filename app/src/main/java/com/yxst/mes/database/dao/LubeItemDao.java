package com.yxst.mes.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.mes.database.model.LubeItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LUBE_ITEM".
*/
public class LubeItemDao extends AbstractDao<LubeItem, Long> {

    public static final String TABLENAME = "LUBE_ITEM";

    /**
     * Properties of entity LubeItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "UserID", false, "USER_ID");
        public final static Property PlanID = new Property(2, Long.class, "PlanID", false, "PLAN_ID");
        public final static Property ZoneID = new Property(3, Long.class, "ZoneID", false, "ZONE_ID");
        public final static Property EquipmentID = new Property(4, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property LubricationItemID = new Property(5, Long.class, "LubricationItemID", false, "LUBRICATION_ITEM_ID");
        public final static Property FatID = new Property(6, Long.class, "FatID", false, "FAT_ID");
        public final static Property BeginTime = new Property(7, java.util.Date.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(8, java.util.Date.class, "EndTime", false, "END_TIME");
        public final static Property ZoneName = new Property(9, String.class, "ZoneName", false, "ZONE_NAME");
        public final static Property FatName = new Property(10, String.class, "FatName", false, "FAT_NAME");
        public final static Property FatModel = new Property(11, String.class, "FatModel", false, "FAT_MODEL");
        public final static Property LubPlace = new Property(12, String.class, "LubPlace", false, "LUB_PLACE");
        public final static Property LubTypeName = new Property(13, String.class, "LubTypeName", false, "LUB_TYPE_NAME");
        public final static Property FirstfatNum = new Property(14, int.class, "FirstfatNum", false, "FIRSTFAT_NUM");
        public final static Property PerAddNum = new Property(15, int.class, "PerAddNum", false, "PER_ADD_NUM");
        public final static Property RealNum = new Property(16, int.class, "RealNum", false, "REAL_NUM");
        public final static Property Unit = new Property(17, String.class, "Unit", false, "UNIT");
    }


    public LubeItemDao(DaoConfig config) {
        super(config);
    }
    
    public LubeItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LUBE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: UserID
                "\"PLAN_ID\" INTEGER," + // 2: PlanID
                "\"ZONE_ID\" INTEGER," + // 3: ZoneID
                "\"EQUIPMENT_ID\" INTEGER," + // 4: EquipmentID
                "\"LUBRICATION_ITEM_ID\" INTEGER," + // 5: LubricationItemID
                "\"FAT_ID\" INTEGER," + // 6: FatID
                "\"BEGIN_TIME\" INTEGER," + // 7: BeginTime
                "\"END_TIME\" INTEGER," + // 8: EndTime
                "\"ZONE_NAME\" TEXT," + // 9: ZoneName
                "\"FAT_NAME\" TEXT," + // 10: FatName
                "\"FAT_MODEL\" TEXT," + // 11: FatModel
                "\"LUB_PLACE\" TEXT," + // 12: LubPlace
                "\"LUB_TYPE_NAME\" TEXT," + // 13: LubTypeName
                "\"FIRSTFAT_NUM\" INTEGER NOT NULL ," + // 14: FirstfatNum
                "\"PER_ADD_NUM\" INTEGER NOT NULL ," + // 15: PerAddNum
                "\"REAL_NUM\" INTEGER NOT NULL ," + // 16: RealNum
                "\"UNIT\" TEXT);"); // 17: Unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LUBE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LubeItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long PlanID = entity.getPlanID();
        if (PlanID != null) {
            stmt.bindLong(3, PlanID);
        }
 
        Long ZoneID = entity.getZoneID();
        if (ZoneID != null) {
            stmt.bindLong(4, ZoneID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(5, EquipmentID);
        }
 
        Long LubricationItemID = entity.getLubricationItemID();
        if (LubricationItemID != null) {
            stmt.bindLong(6, LubricationItemID);
        }
 
        Long FatID = entity.getFatID();
        if (FatID != null) {
            stmt.bindLong(7, FatID);
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(8, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(9, EndTime.getTime());
        }
 
        String ZoneName = entity.getZoneName();
        if (ZoneName != null) {
            stmt.bindString(10, ZoneName);
        }
 
        String FatName = entity.getFatName();
        if (FatName != null) {
            stmt.bindString(11, FatName);
        }
 
        String FatModel = entity.getFatModel();
        if (FatModel != null) {
            stmt.bindString(12, FatModel);
        }
 
        String LubPlace = entity.getLubPlace();
        if (LubPlace != null) {
            stmt.bindString(13, LubPlace);
        }
 
        String LubTypeName = entity.getLubTypeName();
        if (LubTypeName != null) {
            stmt.bindString(14, LubTypeName);
        }
        stmt.bindLong(15, entity.getFirstfatNum());
        stmt.bindLong(16, entity.getPerAddNum());
        stmt.bindLong(17, entity.getRealNum());
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(18, Unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LubeItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long PlanID = entity.getPlanID();
        if (PlanID != null) {
            stmt.bindLong(3, PlanID);
        }
 
        Long ZoneID = entity.getZoneID();
        if (ZoneID != null) {
            stmt.bindLong(4, ZoneID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(5, EquipmentID);
        }
 
        Long LubricationItemID = entity.getLubricationItemID();
        if (LubricationItemID != null) {
            stmt.bindLong(6, LubricationItemID);
        }
 
        Long FatID = entity.getFatID();
        if (FatID != null) {
            stmt.bindLong(7, FatID);
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(8, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(9, EndTime.getTime());
        }
 
        String ZoneName = entity.getZoneName();
        if (ZoneName != null) {
            stmt.bindString(10, ZoneName);
        }
 
        String FatName = entity.getFatName();
        if (FatName != null) {
            stmt.bindString(11, FatName);
        }
 
        String FatModel = entity.getFatModel();
        if (FatModel != null) {
            stmt.bindString(12, FatModel);
        }
 
        String LubPlace = entity.getLubPlace();
        if (LubPlace != null) {
            stmt.bindString(13, LubPlace);
        }
 
        String LubTypeName = entity.getLubTypeName();
        if (LubTypeName != null) {
            stmt.bindString(14, LubTypeName);
        }
        stmt.bindLong(15, entity.getFirstfatNum());
        stmt.bindLong(16, entity.getPerAddNum());
        stmt.bindLong(17, entity.getRealNum());
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(18, Unit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LubeItem readEntity(Cursor cursor, int offset) {
        LubeItem entity = new LubeItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // PlanID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // ZoneID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // EquipmentID
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // LubricationItemID
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // FatID
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // BeginTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // EndTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ZoneName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FatName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FatModel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // LubPlace
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // LubTypeName
            cursor.getInt(offset + 14), // FirstfatNum
            cursor.getInt(offset + 15), // PerAddNum
            cursor.getInt(offset + 16), // RealNum
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // Unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LubeItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPlanID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setZoneID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEquipmentID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLubricationItemID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFatID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setBeginTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setZoneName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFatName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFatModel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLubPlace(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLubTypeName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFirstfatNum(cursor.getInt(offset + 14));
        entity.setPerAddNum(cursor.getInt(offset + 15));
        entity.setRealNum(cursor.getInt(offset + 16));
        entity.setUnit(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LubeItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LubeItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LubeItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
