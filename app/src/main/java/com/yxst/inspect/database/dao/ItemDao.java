package com.yxst.inspect.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.inspect.database.model.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM".
*/
public class ItemDao extends AbstractDao<Item, Long> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "UserID", false, "USER_ID");
        public final static Property LineID = new Property(2, Long.class, "LineID", false, "LINE_ID");
        public final static Property EquipmentID = new Property(3, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property ItemID = new Property(4, Long.class, "ItemID", false, "ITEM_ID");
        public final static Property InspType = new Property(5, int.class, "InspType", false, "INSP_TYPE");
        public final static Property CheckType = new Property(6, int.class, "CheckType", false, "CHECK_TYPE");
        public final static Property CheckContent = new Property(7, String.class, "CheckContent", false, "CHECK_CONTENT");
        public final static Property PlanID = new Property(8, Long.class, "PlanID", false, "PLAN_ID");
        public final static Property ValueType = new Property(9, int.class, "ValueType", false, "VALUE_TYPE");
        public final static Property Operation = new Property(10, int.class, "Operation", false, "OPERATION");
        public final static Property StandardValue = new Property(11, String.class, "StandardValue", false, "STANDARD_VALUE");
        public final static Property Unit = new Property(12, int.class, "Unit", false, "UNIT");
        public final static Property InstrumentRate = new Property(13, float.class, "InstrumentRate", false, "INSTRUMENT_RATE");
        public final static Property RunStatus = new Property(14, int.class, "RunStatus", false, "RUN_STATUS");
        public final static Property InpsectStatus = new Property(15, int.class, "inpsectStatus", false, "INPSECT_STATUS");
        public final static Property PlaceID = new Property(16, Long.class, "PlaceID", false, "PLACE_ID");
        public final static Property PlaceName = new Property(17, String.class, "PlaceName", false, "PLACE_NAME");
        public final static Property CheckValue = new Property(18, String.class, "CheckValue", false, "CHECK_VALUE");
        public final static Property CheckStatus = new Property(19, int.class, "CheckStatus", false, "CHECK_STATUS");
        public final static Property BeginTime = new Property(20, java.util.Date.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(21, java.util.Date.class, "EndTime", false, "END_TIME");
    }


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_ID\" INTEGER," + // 1: UserID
                "\"LINE_ID\" INTEGER," + // 2: LineID
                "\"EQUIPMENT_ID\" INTEGER," + // 3: EquipmentID
                "\"ITEM_ID\" INTEGER," + // 4: ItemID
                "\"INSP_TYPE\" INTEGER NOT NULL ," + // 5: InspType
                "\"CHECK_TYPE\" INTEGER NOT NULL ," + // 6: CheckType
                "\"CHECK_CONTENT\" TEXT," + // 7: CheckContent
                "\"PLAN_ID\" INTEGER," + // 8: PlanID
                "\"VALUE_TYPE\" INTEGER NOT NULL ," + // 9: ValueType
                "\"OPERATION\" INTEGER NOT NULL ," + // 10: Operation
                "\"STANDARD_VALUE\" TEXT," + // 11: StandardValue
                "\"UNIT\" INTEGER NOT NULL ," + // 12: Unit
                "\"INSTRUMENT_RATE\" REAL NOT NULL ," + // 13: InstrumentRate
                "\"RUN_STATUS\" INTEGER NOT NULL ," + // 14: RunStatus
                "\"INPSECT_STATUS\" INTEGER NOT NULL ," + // 15: inpsectStatus
                "\"PLACE_ID\" INTEGER," + // 16: PlaceID
                "\"PLACE_NAME\" TEXT," + // 17: PlaceName
                "\"CHECK_VALUE\" TEXT," + // 18: CheckValue
                "\"CHECK_STATUS\" INTEGER NOT NULL ," + // 19: CheckStatus
                "\"BEGIN_TIME\" INTEGER," + // 20: BeginTime
                "\"END_TIME\" INTEGER);"); // 21: EndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(3, LineID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(4, EquipmentID);
        }
 
        Long ItemID = entity.getItemID();
        if (ItemID != null) {
            stmt.bindLong(5, ItemID);
        }
        stmt.bindLong(6, entity.getInspType());
        stmt.bindLong(7, entity.getCheckType());
 
        String CheckContent = entity.getCheckContent();
        if (CheckContent != null) {
            stmt.bindString(8, CheckContent);
        }
 
        Long PlanID = entity.getPlanID();
        if (PlanID != null) {
            stmt.bindLong(9, PlanID);
        }
        stmt.bindLong(10, entity.getValueType());
        stmt.bindLong(11, entity.getOperation());
 
        String StandardValue = entity.getStandardValue();
        if (StandardValue != null) {
            stmt.bindString(12, StandardValue);
        }
        stmt.bindLong(13, entity.getUnit());
        stmt.bindDouble(14, entity.getInstrumentRate());
        stmt.bindLong(15, entity.getRunStatus());
        stmt.bindLong(16, entity.getInpsectStatus());
 
        Long PlaceID = entity.getPlaceID();
        if (PlaceID != null) {
            stmt.bindLong(17, PlaceID);
        }
 
        String PlaceName = entity.getPlaceName();
        if (PlaceName != null) {
            stmt.bindString(18, PlaceName);
        }
 
        String CheckValue = entity.getCheckValue();
        if (CheckValue != null) {
            stmt.bindString(19, CheckValue);
        }
        stmt.bindLong(20, entity.getCheckStatus());
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(21, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(22, EndTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(3, LineID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(4, EquipmentID);
        }
 
        Long ItemID = entity.getItemID();
        if (ItemID != null) {
            stmt.bindLong(5, ItemID);
        }
        stmt.bindLong(6, entity.getInspType());
        stmt.bindLong(7, entity.getCheckType());
 
        String CheckContent = entity.getCheckContent();
        if (CheckContent != null) {
            stmt.bindString(8, CheckContent);
        }
 
        Long PlanID = entity.getPlanID();
        if (PlanID != null) {
            stmt.bindLong(9, PlanID);
        }
        stmt.bindLong(10, entity.getValueType());
        stmt.bindLong(11, entity.getOperation());
 
        String StandardValue = entity.getStandardValue();
        if (StandardValue != null) {
            stmt.bindString(12, StandardValue);
        }
        stmt.bindLong(13, entity.getUnit());
        stmt.bindDouble(14, entity.getInstrumentRate());
        stmt.bindLong(15, entity.getRunStatus());
        stmt.bindLong(16, entity.getInpsectStatus());
 
        Long PlaceID = entity.getPlaceID();
        if (PlaceID != null) {
            stmt.bindLong(17, PlaceID);
        }
 
        String PlaceName = entity.getPlaceName();
        if (PlaceName != null) {
            stmt.bindString(18, PlaceName);
        }
 
        String CheckValue = entity.getCheckValue();
        if (CheckValue != null) {
            stmt.bindString(19, CheckValue);
        }
        stmt.bindLong(20, entity.getCheckStatus());
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(21, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(22, EndTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // EquipmentID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ItemID
            cursor.getInt(offset + 5), // InspType
            cursor.getInt(offset + 6), // CheckType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CheckContent
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // PlanID
            cursor.getInt(offset + 9), // ValueType
            cursor.getInt(offset + 10), // Operation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // StandardValue
            cursor.getInt(offset + 12), // Unit
            cursor.getFloat(offset + 13), // InstrumentRate
            cursor.getInt(offset + 14), // RunStatus
            cursor.getInt(offset + 15), // inpsectStatus
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // PlaceID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // PlaceName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // CheckValue
            cursor.getInt(offset + 19), // CheckStatus
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // BeginTime
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)) // EndTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLineID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEquipmentID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setItemID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setInspType(cursor.getInt(offset + 5));
        entity.setCheckType(cursor.getInt(offset + 6));
        entity.setCheckContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlanID(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setValueType(cursor.getInt(offset + 9));
        entity.setOperation(cursor.getInt(offset + 10));
        entity.setStandardValue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnit(cursor.getInt(offset + 12));
        entity.setInstrumentRate(cursor.getFloat(offset + 13));
        entity.setRunStatus(cursor.getInt(offset + 14));
        entity.setInpsectStatus(cursor.getInt(offset + 15));
        entity.setPlaceID(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setPlaceName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCheckValue(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCheckStatus(cursor.getInt(offset + 19));
        entity.setBeginTime(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setEndTime(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Item entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
