package com.yxst.inspect.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.inspect.database.model.Undetect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNDETECT".
*/
public class UndetectDao extends AbstractDao<Undetect, Long> {

    public static final String TABLENAME = "UNDETECT";

    /**
     * Properties of entity Undetect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LineID = new Property(1, Long.class, "LineID", false, "LINE_ID");
        public final static Property EquipmentID = new Property(2, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property EquipmentCode = new Property(3, String.class, "EquipmentCode", false, "EQUIPMENT_CODE");
        public final static Property EquipmentName = new Property(4, String.class, "EquipmentName", false, "EQUIPMENT_NAME");
        public final static Property ZoneName = new Property(5, String.class, "ZoneName", false, "ZONE_NAME");
        public final static Property BeginTime = new Property(6, java.util.Date.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(7, java.util.Date.class, "EndTime", false, "END_TIME");
    }

    private DaoSession daoSession;


    public UndetectDao(DaoConfig config) {
        super(config);
    }
    
    public UndetectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNDETECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LINE_ID\" INTEGER," + // 1: LineID
                "\"EQUIPMENT_ID\" INTEGER," + // 2: EquipmentID
                "\"EQUIPMENT_CODE\" TEXT," + // 3: EquipmentCode
                "\"EQUIPMENT_NAME\" TEXT," + // 4: EquipmentName
                "\"ZONE_NAME\" TEXT," + // 5: ZoneName
                "\"BEGIN_TIME\" INTEGER," + // 6: BeginTime
                "\"END_TIME\" INTEGER);"); // 7: EndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNDETECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Undetect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(2, LineID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(3, EquipmentID);
        }
 
        String EquipmentCode = entity.getEquipmentCode();
        if (EquipmentCode != null) {
            stmt.bindString(4, EquipmentCode);
        }
 
        String EquipmentName = entity.getEquipmentName();
        if (EquipmentName != null) {
            stmt.bindString(5, EquipmentName);
        }
 
        String ZoneName = entity.getZoneName();
        if (ZoneName != null) {
            stmt.bindString(6, ZoneName);
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(7, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(8, EndTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Undetect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(2, LineID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(3, EquipmentID);
        }
 
        String EquipmentCode = entity.getEquipmentCode();
        if (EquipmentCode != null) {
            stmt.bindString(4, EquipmentCode);
        }
 
        String EquipmentName = entity.getEquipmentName();
        if (EquipmentName != null) {
            stmt.bindString(5, EquipmentName);
        }
 
        String ZoneName = entity.getZoneName();
        if (ZoneName != null) {
            stmt.bindString(6, ZoneName);
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(7, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(8, EndTime.getTime());
        }
    }

    @Override
    protected final void attachEntity(Undetect entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Undetect readEntity(Cursor cursor, int offset) {
        Undetect entity = new Undetect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // LineID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // EquipmentID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EquipmentCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EquipmentName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ZoneName
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // BeginTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // EndTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Undetect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLineID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEquipmentID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEquipmentCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEquipmentName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZoneName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBeginTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Undetect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Undetect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Undetect entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
