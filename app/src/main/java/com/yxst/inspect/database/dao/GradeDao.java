package com.yxst.inspect.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.inspect.database.model.Grade;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE".
*/
public class GradeDao extends AbstractDao<Grade, Long> {

    public static final String TABLENAME = "GRADE";

    /**
     * Properties of entity Grade.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InspectionItemID = new Property(1, Long.class, "InspectionItemID", false, "INSPECTION_ITEM_ID");
        public final static Property GradeCode = new Property(2, int.class, "GradeCode", false, "GRADE_CODE");
        public final static Property MinCheckValue = new Property(3, float.class, "MinCheckValue", false, "MIN_CHECK_VALUE");
        public final static Property MaxCheckValue = new Property(4, float.class, "MaxCheckValue", false, "MAX_CHECK_VALUE");
    }


    public GradeDao(DaoConfig config) {
        super(config);
    }
    
    public GradeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INSPECTION_ITEM_ID\" INTEGER," + // 1: InspectionItemID
                "\"GRADE_CODE\" INTEGER NOT NULL ," + // 2: GradeCode
                "\"MIN_CHECK_VALUE\" REAL NOT NULL ," + // 3: MinCheckValue
                "\"MAX_CHECK_VALUE\" REAL NOT NULL );"); // 4: MaxCheckValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Grade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long InspectionItemID = entity.getInspectionItemID();
        if (InspectionItemID != null) {
            stmt.bindLong(2, InspectionItemID);
        }
        stmt.bindLong(3, entity.getGradeCode());
        stmt.bindDouble(4, entity.getMinCheckValue());
        stmt.bindDouble(5, entity.getMaxCheckValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Grade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long InspectionItemID = entity.getInspectionItemID();
        if (InspectionItemID != null) {
            stmt.bindLong(2, InspectionItemID);
        }
        stmt.bindLong(3, entity.getGradeCode());
        stmt.bindDouble(4, entity.getMinCheckValue());
        stmt.bindDouble(5, entity.getMaxCheckValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Grade readEntity(Cursor cursor, int offset) {
        Grade entity = new Grade( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // InspectionItemID
            cursor.getInt(offset + 2), // GradeCode
            cursor.getFloat(offset + 3), // MinCheckValue
            cursor.getFloat(offset + 4) // MaxCheckValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Grade entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInspectionItemID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGradeCode(cursor.getInt(offset + 2));
        entity.setMinCheckValue(cursor.getFloat(offset + 3));
        entity.setMaxCheckValue(cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Grade entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Grade entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Grade entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
