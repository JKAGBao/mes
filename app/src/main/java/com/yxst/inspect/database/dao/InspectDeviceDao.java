package com.yxst.inspect.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.inspect.database.model.InspectDevice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT_DEVICE".
*/
public class InspectDeviceDao extends AbstractDao<InspectDevice, Long> {

    public static final String TABLENAME = "INSPECT_DEVICE";

    /**
     * Properties of entity InspectDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "UserID", false, "USER_ID");
        public final static Property EquipmentID = new Property(2, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property LineID = new Property(3, Long.class, "LineID", false, "LINE_ID");
        public final static Property EquipmentCode = new Property(4, String.class, "EquipmentCode", false, "EQUIPMENT_CODE");
        public final static Property EquipmentName = new Property(5, String.class, "EquipmentName", false, "EQUIPMENT_NAME");
        public final static Property EquipmentModel = new Property(6, String.class, "EquipmentModel", false, "EQUIPMENT_MODEL");
        public final static Property RFID = new Property(7, String.class, "RFID", false, "RFID");
        public final static Property CheckStatus = new Property(8, int.class, "CheckStatus", false, "CHECK_STATUS");
        public final static Property UploadStatus = new Property(9, int.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property StartInpectDate = new Property(10, java.util.Date.class, "startInpectDate", false, "START_INPECT_DATE");
        public final static Property FinishInpectDate = new Property(11, java.util.Date.class, "finishInpectDate", false, "FINISH_INPECT_DATE");
        public final static Property BeginTime = new Property(12, java.util.Date.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(13, java.util.Date.class, "EndTime", false, "END_TIME");
        public final static Property RunStates = new Property(14, int.class, "RunStates", false, "RUN_STATES");
    }

    private DaoSession daoSession;


    public InspectDeviceDao(DaoConfig config) {
        super(config);
    }
    
    public InspectDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT_DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_ID\" INTEGER," + // 1: UserID
                "\"EQUIPMENT_ID\" INTEGER," + // 2: EquipmentID
                "\"LINE_ID\" INTEGER," + // 3: LineID
                "\"EQUIPMENT_CODE\" TEXT," + // 4: EquipmentCode
                "\"EQUIPMENT_NAME\" TEXT," + // 5: EquipmentName
                "\"EQUIPMENT_MODEL\" TEXT," + // 6: EquipmentModel
                "\"RFID\" TEXT," + // 7: RFID
                "\"CHECK_STATUS\" INTEGER NOT NULL ," + // 8: CheckStatus
                "\"UPLOAD_STATUS\" INTEGER NOT NULL ," + // 9: uploadStatus
                "\"START_INPECT_DATE\" INTEGER," + // 10: startInpectDate
                "\"FINISH_INPECT_DATE\" INTEGER," + // 11: finishInpectDate
                "\"BEGIN_TIME\" INTEGER," + // 12: BeginTime
                "\"END_TIME\" INTEGER," + // 13: EndTime
                "\"RUN_STATES\" INTEGER NOT NULL );"); // 14: RunStates
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT_DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InspectDevice entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(3, EquipmentID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(4, LineID);
        }
 
        String EquipmentCode = entity.getEquipmentCode();
        if (EquipmentCode != null) {
            stmt.bindString(5, EquipmentCode);
        }
 
        String EquipmentName = entity.getEquipmentName();
        if (EquipmentName != null) {
            stmt.bindString(6, EquipmentName);
        }
 
        String EquipmentModel = entity.getEquipmentModel();
        if (EquipmentModel != null) {
            stmt.bindString(7, EquipmentModel);
        }
 
        String RFID = entity.getRFID();
        if (RFID != null) {
            stmt.bindString(8, RFID);
        }
        stmt.bindLong(9, entity.getCheckStatus());
        stmt.bindLong(10, entity.getUploadStatus());
 
        java.util.Date startInpectDate = entity.getStartInpectDate();
        if (startInpectDate != null) {
            stmt.bindLong(11, startInpectDate.getTime());
        }
 
        java.util.Date finishInpectDate = entity.getFinishInpectDate();
        if (finishInpectDate != null) {
            stmt.bindLong(12, finishInpectDate.getTime());
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(13, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(14, EndTime.getTime());
        }
        stmt.bindLong(15, entity.getRunStates());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InspectDevice entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(3, EquipmentID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(4, LineID);
        }
 
        String EquipmentCode = entity.getEquipmentCode();
        if (EquipmentCode != null) {
            stmt.bindString(5, EquipmentCode);
        }
 
        String EquipmentName = entity.getEquipmentName();
        if (EquipmentName != null) {
            stmt.bindString(6, EquipmentName);
        }
 
        String EquipmentModel = entity.getEquipmentModel();
        if (EquipmentModel != null) {
            stmt.bindString(7, EquipmentModel);
        }
 
        String RFID = entity.getRFID();
        if (RFID != null) {
            stmt.bindString(8, RFID);
        }
        stmt.bindLong(9, entity.getCheckStatus());
        stmt.bindLong(10, entity.getUploadStatus());
 
        java.util.Date startInpectDate = entity.getStartInpectDate();
        if (startInpectDate != null) {
            stmt.bindLong(11, startInpectDate.getTime());
        }
 
        java.util.Date finishInpectDate = entity.getFinishInpectDate();
        if (finishInpectDate != null) {
            stmt.bindLong(12, finishInpectDate.getTime());
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(13, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(14, EndTime.getTime());
        }
        stmt.bindLong(15, entity.getRunStates());
    }

    @Override
    protected final void attachEntity(InspectDevice entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InspectDevice readEntity(Cursor cursor, int offset) {
        InspectDevice entity = new InspectDevice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // EquipmentID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // LineID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EquipmentCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EquipmentName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EquipmentModel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // RFID
            cursor.getInt(offset + 8), // CheckStatus
            cursor.getInt(offset + 9), // uploadStatus
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // startInpectDate
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // finishInpectDate
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // BeginTime
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // EndTime
            cursor.getInt(offset + 14) // RunStates
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InspectDevice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEquipmentID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLineID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEquipmentCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEquipmentName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEquipmentModel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRFID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCheckStatus(cursor.getInt(offset + 8));
        entity.setUploadStatus(cursor.getInt(offset + 9));
        entity.setStartInpectDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setFinishInpectDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setBeginTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setEndTime(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setRunStates(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InspectDevice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InspectDevice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InspectDevice entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
