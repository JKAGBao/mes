package com.yxst.inspect.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.inspect.database.model.InspectDeviceValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT_DEVICE_VALUE".
*/
public class InspectDeviceValueDao extends AbstractDao<InspectDeviceValue, Long> {

    public static final String TABLENAME = "INSPECT_DEVICE_VALUE";

    /**
     * Properties of entity InspectDeviceValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "UserID", false, "USER_ID");
        public final static Property EquipmentID = new Property(2, Long.class, "EquipmentID", false, "EQUIPMENT_ID");
        public final static Property LineID = new Property(3, Long.class, "LineID", false, "LINE_ID");
        public final static Property NfcCode = new Property(4, Long.class, "NfcCode", false, "NFC_CODE");
        public final static Property InspectStatus = new Property(5, int.class, "inspectStatus", false, "INSPECT_STATUS");
        public final static Property UploadStatus = new Property(6, int.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property ShowStatus = new Property(7, int.class, "showStatus", false, "SHOW_STATUS");
        public final static Property BeginTime = new Property(8, java.util.Date.class, "BeginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(9, java.util.Date.class, "EndTime", false, "END_TIME");
    }


    public InspectDeviceValueDao(DaoConfig config) {
        super(config);
    }
    
    public InspectDeviceValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT_DEVICE_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_ID\" INTEGER," + // 1: UserID
                "\"EQUIPMENT_ID\" INTEGER," + // 2: EquipmentID
                "\"LINE_ID\" INTEGER," + // 3: LineID
                "\"NFC_CODE\" INTEGER," + // 4: NfcCode
                "\"INSPECT_STATUS\" INTEGER NOT NULL ," + // 5: inspectStatus
                "\"UPLOAD_STATUS\" INTEGER NOT NULL ," + // 6: uploadStatus
                "\"SHOW_STATUS\" INTEGER NOT NULL ," + // 7: showStatus
                "\"BEGIN_TIME\" INTEGER," + // 8: BeginTime
                "\"END_TIME\" INTEGER);"); // 9: EndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT_DEVICE_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InspectDeviceValue entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(3, EquipmentID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(4, LineID);
        }
 
        Long NfcCode = entity.getNfcCode();
        if (NfcCode != null) {
            stmt.bindLong(5, NfcCode);
        }
        stmt.bindLong(6, entity.getInspectStatus());
        stmt.bindLong(7, entity.getUploadStatus());
        stmt.bindLong(8, entity.getShowStatus());
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(9, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(10, EndTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InspectDeviceValue entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(2, UserID);
        }
 
        Long EquipmentID = entity.getEquipmentID();
        if (EquipmentID != null) {
            stmt.bindLong(3, EquipmentID);
        }
 
        Long LineID = entity.getLineID();
        if (LineID != null) {
            stmt.bindLong(4, LineID);
        }
 
        Long NfcCode = entity.getNfcCode();
        if (NfcCode != null) {
            stmt.bindLong(5, NfcCode);
        }
        stmt.bindLong(6, entity.getInspectStatus());
        stmt.bindLong(7, entity.getUploadStatus());
        stmt.bindLong(8, entity.getShowStatus());
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(9, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(10, EndTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InspectDeviceValue readEntity(Cursor cursor, int offset) {
        InspectDeviceValue entity = new InspectDeviceValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // EquipmentID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // LineID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // NfcCode
            cursor.getInt(offset + 5), // inspectStatus
            cursor.getInt(offset + 6), // uploadStatus
            cursor.getInt(offset + 7), // showStatus
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // BeginTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // EndTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InspectDeviceValue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEquipmentID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLineID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNfcCode(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setInspectStatus(cursor.getInt(offset + 5));
        entity.setUploadStatus(cursor.getInt(offset + 6));
        entity.setShowStatus(cursor.getInt(offset + 7));
        entity.setBeginTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEndTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InspectDeviceValue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InspectDeviceValue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InspectDeviceValue entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
