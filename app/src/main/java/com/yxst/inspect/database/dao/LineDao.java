package com.yxst.inspect.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yxst.inspect.database.model.Line;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINE".
*/
public class LineDao extends AbstractDao<Line, Long> {

    public static final String TABLENAME = "LINE";

    /**
     * Properties of entity Line.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property InspectionType = new Property(1, int.class, "InspectionType", false, "INSPECTION_TYPE");
        public final static Property InspectionTypeName = new Property(2, String.class, "InspectionTypeName", false, "INSPECTION_TYPE_NAME");
        public final static Property LineCode = new Property(3, String.class, "LineCode", false, "LINE_CODE");
        public final static Property LineName = new Property(4, String.class, "LineName", false, "LINE_NAME");
        public final static Property RFID = new Property(5, String.class, "RFID", false, "RFID");
    }


    public LineDao(DaoConfig config) {
        super(config);
    }
    
    public LineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"INSPECTION_TYPE\" INTEGER NOT NULL ," + // 1: InspectionType
                "\"INSPECTION_TYPE_NAME\" TEXT," + // 2: InspectionTypeName
                "\"LINE_CODE\" TEXT," + // 3: LineCode
                "\"LINE_NAME\" TEXT," + // 4: LineName
                "\"RFID\" TEXT);"); // 5: RFID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Line entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getInspectionType());
 
        String InspectionTypeName = entity.getInspectionTypeName();
        if (InspectionTypeName != null) {
            stmt.bindString(3, InspectionTypeName);
        }
 
        String LineCode = entity.getLineCode();
        if (LineCode != null) {
            stmt.bindString(4, LineCode);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(5, LineName);
        }
 
        String RFID = entity.getRFID();
        if (RFID != null) {
            stmt.bindString(6, RFID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Line entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getInspectionType());
 
        String InspectionTypeName = entity.getInspectionTypeName();
        if (InspectionTypeName != null) {
            stmt.bindString(3, InspectionTypeName);
        }
 
        String LineCode = entity.getLineCode();
        if (LineCode != null) {
            stmt.bindString(4, LineCode);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(5, LineName);
        }
 
        String RFID = entity.getRFID();
        if (RFID != null) {
            stmt.bindString(6, RFID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Line readEntity(Cursor cursor, int offset) {
        Line entity = new Line( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // InspectionType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // InspectionTypeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LineCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LineName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // RFID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Line entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInspectionType(cursor.getInt(offset + 1));
        entity.setInspectionTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLineCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLineName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRFID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Line entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Line entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Line entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
